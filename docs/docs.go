// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2021-02-08 22:05:15.968512 +0900 JST m=+0.040800023

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Get all people data, this includes self and one level like parent's and partner's data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "People"
                ],
                "summary": "GetALlPeople",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.Person"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new entry for a person object, you can mention any level of father, mother or partners.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "People"
                ],
                "summary": "CreatePerson",
                "parameters": [
                    {
                        "description": "json data",
                        "name": "person",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.Person"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.Person"
                        }
                    }
                }
            }
        },
        "/search": {
            "post": {
                "description": "Search for a person by the given fields, all the matching objects will be returned as a list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "People"
                ],
                "summary": "SearchPerson",
                "parameters": [
                    {
                        "description": "json data",
                        "name": "person",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.Person"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.Person"
                        }
                    }
                }
            }
        },
        "/{uid}/": {
            "get": {
                "description": "Get details of a person like father, mother and partners via id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "GetPerson",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.Person"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update person's details like father, mother or partners by post data, uid of a person is required in url path",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "UpdatePerson",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "json data",
                        "name": "person",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.Person"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.Person"
                        }
                    }
                }
            }
        },
        "/{uid}/children/": {
            "get": {
                "description": "Get children's details of a person via id (only immediage children are fetched)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "GetChildren",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uid",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.Person"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.Person": {
            "type": "object",
            "properties": {
                "daughters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.Person"
                    }
                },
                "deceased": {
                    "type": "boolean"
                },
                "deleted": {
                    "type": "boolean"
                },
                "dgraph.type": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "father": {
                    "type": "object",
                    "$ref": "#/definitions/main.Person"
                },
                "gender": {
                    "type": "string"
                },
                "husband": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.Person"
                    }
                },
                "mother": {
                    "type": "object",
                    "$ref": "#/definitions/main.Person"
                },
                "name": {
                    "type": "string"
                },
                "sons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.Person"
                    }
                },
                "uid": {
                    "type": "string"
                },
                "wife": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.Person"
                    }
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "3.0.0",
	Host:        "localhost:8088",
	BasePath:    "/people",
	Schemes:     []string{},
	Title:       "Family tree apis",
	Description: "This is api spec for family tree project.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
